OpenGrok 可以使用多种不同方式安装和使用，我们在这只介绍使用wrapper script 的例子。更高阶的配置需要了解Java应用和OpenGrok命令行选项。注意，不管你使用什么方式安装，都需要设置 '''index setup''', OpenGrok 没有 indexes 无法运行。这个文档会随时更新。

== 需求 ==

你需要安装如下软件:

* [http://www.oracle.com/technetwork/java/ JDK] 1.8 or higher
* {OpenGrok '''binaries''' from https://github.com/OpenGrok/OpenGrok/releases (either the package for Solaris, or .tar.gz with binaries, NOT the src !)
* [http://ctags.sourceforge.net Exuberant Ctags] for analysis (https://github.com/universal-ctags is recommended)
* A servlet container like [https://glassfish.dev.java.net/ GlassFish] or [http://tomcat.apache.org Tomcat] (5.x or later) also running with java at least 1.8
* If history is needed, appropriate binary (in some cases also cvs/svn repository) must be present on the system (e.g. [http://subversion.tigris.org Subversion] or [http://www.selenic.com/mercurial/wiki/index.cgi Mercurial] or [http://dlc.sun.com/osol/devpro/downloads/current/ SCCS] or ... )
* 2GB of memory for indexing process using OpenGrok script (can use less, this is scaled for bigger deployments)
* a recent browser for clients - IE, Firefox, recent Chrome or Safari
* sufficient ULIMIT settings (refer to README)

== 建议高阶用户阅读如下链接 ==

* [https://github.com/OpenGrok/OpenGrok/blob/master/OpenGrok Opengrok script trunk source]
* [https://github.com/OpenGrok/OpenGrok/blob/master/doc/EXAMPLE.txt Sample setup]
* [https://github.com/OpenGrok/OpenGrok/blob/master/src/org/opensolaris/opengrok/index/CommandLineOptions.java#L71 development trunk usage info (CommandLineOptions class]]
* [https://github.com/OpenGrok/OpenGrok/blob/master/README.txt#L384 manual javadb installation for historycache to be kept in derby instead of plain files]

== INDEX and web application 设置 ==

安装完这些软件 (e.g. <code>pkgadd -d ./OSOLopengrok-0.?.pkg</code>) 或者解压文件到你的目录后 (e.g. <code>cd your_target_dir ; gzcat opengrok-0.?.tar.gz | tar xf - </code>), 你只需要创建index文件，然后就可以使用命令行运行查看你的源码了。

当然如果你需要查看repository的历史信息，那么还需安装对应的SCM 环境。

=== 创建 Index ===

当OpenGrok被部署好时，可以使用命令行自动定期更新索引。

'''Project 概念''' -  在 <code>SRC_ROOT</code> 目录下的每个目录都是一个Project。通常目录中会包含一个项目的源码checkout (or it's branch, version, ...) , 可以有几个属性 (在XML 文件中), 注意 项目接口已经很稳定，所以属性可以更改。 Projects effectively replace need for more web applications with opengrok <code>.war</code> and leave you with one indexer and one web application serving MORE source code repositories - projects. A nice concept is to have directories underneath <code>SRC_ROOT</code> with a naming convention, thereby creating a good overview of projects (e.g. name-version-branch). Then you have a simple update script & simple index refresher script in place, which simplifies management of more repositories.

[[/images/setup-project.png]]

==== <u>Step.0</u> - 设置源码 Having the web application container ready. ====

源码必须在本地可以被OpenGrok访问才能工作，不需要改变源码目录结构。如果在使用CVS/SVN, 则需要检出源码到SRC_ROOT。

'''Note:''' 如果opengrok版本低于0.7，历史记录不能从远程服务器获取，需要设置本地CVSROOT/SVNROOT repository。 较高版本则可以使用参数<code>-r on</code> 获取远程repositories 历史，当然这样也会消耗更多资源 (time,cpu,network)。注意，OpenGrok 会忽略符号链接。

安装之前需要先安装web 应用，并确认web应用可用。(e.g. [http://tomcat.apache.org/ Tomcat],[https://glassfish.dev.java.net/ GlassFish] or [http://www.sun.com/software/products/appsrvr Sun Java Application Server]) 

==== <u>Step.1</u> - 部署web 应用 ====

我们提供了一个可以部署web 应用的wrapper script。
先切换到安装OpenGrok目录 (can vary on your system)

 # cd /usr/opengrok/bin

运行

 # ./OpenGrok deploy

This command will do some sanity checks and will deploy the source.war in its directory to one of detected web application containers.
Please follow the error message it provides.
If it fails to discover your container, please refer to optional steps on changing web application properties, which has manual steps on how to do this.
Alternatively use <code>OPENGROK_TOMCAT_BASE</code> environment variable, e.g.

 # OPENGROK_TOMCAT_BASE=/path/to/my/tomcat/install ./OpenGrok deploy

Note that OpenGrok script expects the directory <code>/var/opengrok</code> to be available to user running opengrok with all permissions. In root user case it will create all the directories needed, otherwise you have to manually create the directory and grant all permissions to the user used.

==== <u>Step.2</u> - Populate DATA_ROOT Directory, let the indexer generate the project XML config file, update configuration.xml to your web app ====

Second step is to just run the indexing (can take a lot of time). After this is done, indexer automatically attempts to upload newly generated configuration to the web application. Most probably you will not be able to use {Opengrok before this is done.

Please change to opengrok directory (can vary on your system)

 $ cd /usr/opengrok/bin

and run, if your SRC_ROOT is prepared under <code>/var/opengrok/src</code>

 $ ./OpenGrok index

otherwise (if SRC_ROOT is in different directory) run:

 $ ./OpenGrok index <absolute_path_to_your_SRC_ROOT>

NOTE: Please DON'T use symlinks to /var/opengrok/src - rather use above command with parameter.

Above command should try to upload latest index status reflected into configuration.xml to a running source web application.
Once above command finishes without errors(e.g. SEVERE: Failed to send configuration to localhost:2424
), you should be able to enjoy your opengrok and search your sources using latest indexes and setup.

It is assumed that any SCM commands are reachable in one of the components
of the PATH environment variable (e.g. 'git' command for Git repositories).
Likewise, this should be maintained in the environment of the user which runs
the web server instance.

Congratulations, you should now be able to point your browser to http://YOUR_WEBAPP_SERVER:WEBAPPSRV_PORT/source to work with your fresh opengrok installation! :-)

At this time we'd like to point out some customization to OpenGrok script for advanced users.
A common case would be, that you want the data in some other directory than /var/opengrok.
This can be easily achieved by using environment variable OPENGROK_INSTANCE_BASE .
E.g. if my opengrok data directory is <code>/tank/opengrok</code> and my source root is in <code>/tank/source</code> and I'd like to get more verbosity I'd run the indexer as:

 $ OPENGROK_VERBOSE=true OPENGROK_INSTANCE_BASE=/tank/opengrok ./OpenGrok index /tank/source

Since above will also change default location of config file, beforehands(or restart your web container after creating this symlink) I suggest doing below for our case of having opengrok instance in <code>/tank/opengrok</code> :

 # ln -s /tank/opengrok/etc/configuration.xml /var/opengrok/etc/configuration.xml


A lot more customizations can be found inside the script, you just need to have a look [https://github.com/OpenGrok/OpenGrok/blob/master/OpenGrok at it], eventually create a configuration out of it and use <code>OPENGROK_CONFIGURATION</code> environment variable to point to it. Obviously such setups can be used for nightly cron job updates of index or other automated purposes.

===== Large number of projects on Tomcat =====

If you have a large number of projects the http headers start to get big and you need to increase this in the settings.xml file in the http connector add:
 maxHttpHeaderSize="65536"
Failure to do so will result in 400 errors after first query - with the error "Error parsing HTTP request header"

== Optional info ==

Additional information can be found in the [https://github.com/OpenGrok/OpenGrok/blob/master/doc/EXAMPLE.txt EXAMPLE.txt] in the doc folder

=== Windows installation ===
http://algopadawan.blogspot.co.uk/2012/07/installing-opengrok-on-windows.html

=== CLI - Command Line Interface Usage ===

You need to pass location of project file + the query to Search class, e.g. for fulltext search for project with above generated configuration.xml you'd do:

 $ java -cp ./opengrok.jar org.opensolaris.opengrok.search.Search -R /var/opengrok/etc/configuration.xml -f fulltext_search_string

For quick help run:

 $ java -cp ./opengrok.jar org.opensolaris.opengrok.search.Search

Sample search:

[[/images/CLI-search.png]]

==== Optional need to change web application properties or name ====

You might need to modify the web application if you don't store the configuration file in the default location (<code>/var/opengrok/etc/configuration.xml</code>).

To '''configure''' the webapp source.war, look into the parameters defined in <code>WEB-INF/web.xml</code> of <code>source.war</code> (use <code>jar</code> or <code>zip/unzip</code> or your preffered zip tool to get into it - e.g. extract the web.xml file from source.war (<code>$ unzip source.war WEB-INF/web.xml</code>) file, edit web.xml and re-package the jar file (<code>zip -u source.war WEB-INF/web.xml</code>) ) file and change those web.xml parameters appropriately. These sample parameters need modifying.

* CONFIGURATION - the absolute path to XML file containing project configuration (e.g. <code>/var/opengrok/etc/configuration.xml</code>)
* ConfigAddress - port for remote updates to configuration, optional, but '''advised (since there is no authentification)''' to be set to '''localhost''':<some_port> (e.g. localhost:2424), if you choose some_port below 1024 you have to have root privileges.

If you need to change name of the web application from source to something else you need to use special option <code>-w <new_name></code> for indexer to create proper xrefs, besides changing the <code>.war</code> file name. Examples below show just deploying source.war, but you can use it to deploy your new_name.war too.

==== Deploy the modified .war file in glassfish/Sun Java App Server: ====

* '''Option 1:''' Use browser and log into <code>glassfish web administration interface</code>

: Common Tasks / Applications / Web Applications , button '''Deploy''' and point it to your source.war webarchive

* '''Option 2:''' Copy the source.war file to //GLASSFISH///domains///YOURDOMAIN///autodeploy directory, glassfish will try to deploy it "automagically".
* '''Option 3:''' Use cli from //GLASSFISH// directory:

 # ./bin/asadmin deploy /path/to/source.war

==== Deploy the modified .war file in tomcat: ====

* just copy the source.war file to //TOMCAT_INSTALL///webapps directory.

==== Optional setup of security manager for tomcat ====

On some linux distribution you need to setup permissions for SRC_ROOT and DATA_ROOT. Please check your [http://tomcat.apache.org/tomcat-5.5-doc/security-manager-howto.html Tomcat documentation] on this, or simply disable (your risk!) <u>security manager</u> for Tomcat (e.g. in debian/ubuntu : in file <code>/etc/default/tomcat5.5</code> set <code>TOMCAT5_SECURITY=no</code>).
A sample approach is to <u>edit</u> <code>/etc/tomcat5.5/04webapps.policy</code> (or <code>/var/apache/tomcat/conf/catalina.policy</code>) and set this (it will give opengrok all permissions) for your opengrok webapp instance:

<pre>
grant codeBase "file:${catalina.home}/webapps/source/-" {     
permission java.security.AllPermission;};
grant codeBase "file:${catalina.home}/webapps/source/WEB-INF/lib/-" {     
permission java.security.AllPermission;};
</pre>

Alternatively you can be more restrictive (haven't tested below with a complex setup(e.g. some versioning system which needs local access as cvs), if it will not work, please report through [[Discussions]].

<pre>
grant codeBase "file:${catalina.home}/webapps/source/-" {  
permission java.util.PropertyPermission "subversion.native.library", "read";  
permission java.lang.RuntimePermission "loadLibrary.svnjavahl-1?;  
permission java.lang.RuntimePermission "loadLibrary.libsvnjavahl-1?;  
permission java.lang.RuntimePermission "loadLibrary.svnjavahl";  
permission java.util.PropertyPermission "disableLuceneLocks", "read";  
permission java.util.PropertyPermission "catalina.home", "read";  
permission java.util.PropertyPermission "java.io.tmpdir", "read";  
permission java.util.PropertyPermission "org.apache.lucene.lockdir", "read";  
permission java.util.PropertyPermission "org.apache.lucene.writeLockTimeout", "read";  
permission java.util.PropertyPermission "org.apache.lucene.commitLockTimeout", "read";  
permission java.util.PropertyPermission "org.apache.lucene.mergeFactor", "read";  
permission java.util.PropertyPermission "org.apache.lucene.minMergeDocs", "read";  
permission java.util.PropertyPermission "org.apache.lucene.*", "read";  
permission java.io.FilePermission "/var/lib/tomcat5/temp", "read";  
permission java.io.FilePermission "/var/lib/tomcat5/temp/*", "write";  
permission java.io.FilePermission "/var/lib/tomcat5/temp/*", "delete";};
grant codeBase "file:${catalina.home}/webapps/source/WEB-INF/lib/-" {  
permission java.util.PropertyPermission "subversion.native.library", "read";  
permission java.lang.RuntimePermission "loadLibrary.svnjavahl-1?;  
permission java.util.PropertyPermission "disableLuceneLocks", "read";  
permission java.util.PropertyPermission "catalina.home", "read";  
permission java.util.PropertyPermission "java.io.tmpdir", "read";};
grant codeBase "file:${catalina.home}/webapps/source/WEB-INF/classes/-" {  
permission java.util.PropertyPermission "subversion.native.library", "read";  
permission java.lang.RuntimePermission "loadLibrary.svnjavahl-1?;  
permission java.util.PropertyPermission "disableLuceneLocks", "read";  
permission java.util.PropertyPermission "catalina.home", "read";  
permission java.util.PropertyPermission "java.io.tmpdir", "read";};
</pre>

Thanks to Vincent Liu & Flo.
